/* Name: Yuqiang Zhu.  Student ID: 853912.
 * Student email: yuqiangz@student.unimelb.edu.au
 * task1 & 2, Assignment 1b, SWEN90004
 */

const NUM_PILOTS = 2
const NUM_TUGS = 5
const DOCKING_TUGS = 3
const UNDOCKING_TUGS = 2
const CAPACITY_ARRIVAL_ZONE = 1
const CAPACITY_DEPARTURE_ZONE = 1

range PILOTS_RANGE = 0..NUM_PILOTS - 1

const False = 0
const True = 1
range Bool = False..True

/* PILOT is the core of the whole system, it is responsible for acquiring 
 * a cargo ship from arrival zone, acquiring docking tugs to dock, releasing 
 * docking tugs, docking, unload, acquire undocking tugs, undocking, releasing
 * undocking tugs when the cargo ship arrives departure zone */
PILOT = (acquire_ship -> acquire_docking_tugs -> dock -> release_docking_tugs
    -> unload -> acquire_undocking_tugs -> undock -> release_ship 
    -> release_undocking_tugs -> PILOT).

/* TUGS represents the tugs, and the parameter shows the number of free tugs 
 * which can be acquired. It is responsible for acquiring and releasing tugs */
TUGS = TUGS[NUM_TUGS],
TUGS[i : 0..NUM_TUGS] = (when (i - DOCKING_TUGS >= 0) acquire_docking_tugs
         -> TUGS[i - DOCKING_TUGS]
    |when (i - UNDOCKING_TUGS >= 0) acquire_undocking_tugs 
        -> TUGS[i - UNDOCKING_TUGS]
    |when (i + DOCKING_TUGS <= NUM_TUGS) release_docking_tugs
         -> TUGS[i + DOCKING_TUGS]
    |when (i + UNDOCKING_TUGS <= NUM_TUGS) release_undocking_tugs 
        -> TUGS[i + UNDOCKING_TUGS]).

/* PRUDOCER produces new cargo ship when arrival zone is free.
 * ARRIVAL_ZONE represents the arrival zone. The first parameter shows the 
 * number of cargo ships in arrival zone. The second parameter is the number of 
 * pilots who have acquired a cargo ship but not yet acquire docking tugs. The 
 * initial state of arrival zone is no ship and no pilot in it. */
PRODUCER = ARRIVAL_ZONE[0][0],
ARRIVAL_ZONE[num_ships:0..CAPACITY_ARRIVAL_ZONE][num_pilots:0..NUM_PILOTS] =
    ( // when pilot acquires a ship, the ship is still in the zone.
    when (num_pilots < NUM_PILOTS && num_ships - num_pilots > 0) 
        pilot[PILOTS_RANGE].acquire_ship 
        -> ARRIVAL_ZONE[num_ships][num_pilots + 1]
    | // when pilot acquires docking ships, the ship departs the zone. 
	when (num_ships > 0 && num_pilots > 0) 
        pilot[PILOTS_RANGE].acquire_docking_tugs 
        -> ARRIVAL_ZONE[num_ships - 1][num_pilots - 1]
    | // arrival zone gets a new cargo ship
    when (num_ships < CAPACITY_ARRIVAL_ZONE) arrival_zone_get_new_ship 
        -> ARRIVAL_ZONE[num_ships + 1][num_pilots]
    ).

/* OPERATOR controls the shield. The shield is assumed as activated at the 
 * beginning. */
OPERATOR = BERTH_SHIELD[True],
BERTH_SHIELD[status:Bool] = 
    (when (status == False) activate_shield -> BERTH_SHIELD[True]
    | // pilot can only docks the ship when shield is deactivated.
	when (status == False) pilot[PILOTS_RANGE].dock -> BERTH_SHIELD[status]
    | // pilot can only undocks the ship when shield is deactivated.
	when (status == False) pilot[PILOTS_RANGE].undock -> BERTH_SHIELD[status]
	|when (status == True) deactivate_shield -> BERTH_SHIELD[False]).

/* BERTH represents the berth, the parameter shows whether there is ship in the 
 * berth */
BERTH = BERTH[False],
BERTH[ship_in:Bool] =
    (when (ship_in == False) pilot[PILOTS_RANGE].dock -> BERTH[True]
	|when (ship_in == True) pilot[PILOTS_RANGE].undock -> BERTH[False]).

/* CONSUMER consumes the ships in the departure zone.
 * DEPARTURE_ZONE represents the departure zone, and the parameter shows the 
 * number of cargo ships in departure zone. This process is responsible for 
 * receiving cargo ships and consumering them */
CONSUMER = DEPARTURE_ZONE[0],
DEPARTURE_ZONE[num_ships:0..CAPACITY_DEPARTURE_ZONE] = 
    (when (num_ships > 0) ship_departs_departure_zone 
        -> DEPARTURE_ZONE[num_ships - 1]
	|when (num_ships < CAPACITY_DEPARTURE_ZONE) 
        pilot[PILOTS_RANGE].release_ship -> DEPARTURE_ZONE[num_ships + 1]).

/* The USS Emafor System */
||USS_EMAFOR = (PRODUCER || OPERATOR || BERTH || CONSUMER 
    || pilot[PILOTS_RANGE]:PILOT || pilot[PILOTS_RANGE]::TUGS).

/************************ safety properties ************************/
/* The berth can only accommodate one ship, so the actions of PILOT related with
 * berth should only be done by the same PILOT */
property SAFE_PILOT_ORDER = 
    ( pilot[i:PILOTS_RANGE].dock -> pilot[i].release_docking_tugs 
    -> pilot[i].unload -> pilot[i].acquire_undocking_tugs -> pilot[i].undock 
    -> SAFE_PILOT_ORDER).

||CHECK = (USS_EMAFOR || SAFE_PILOT_ORDER).

/************************ liveness properties ************************/
/* if pilot acquire docking tugs, it must eventually can get docking tugs 
 * instead of starvation */
progress ACQUIRE_DOCKING_TUGS[i : PILOTS_RANGE] = 
    {pilot[i].acquire_docking_tugs}

/* if pilot acquire docking tugs, it must eventually can get docking tugs 
 * instead of starvation */
progress ACQUIRE_UNDOCKING_TUGS[i : PILOTS_RANGE] = 
    {pilot[i].acquire_undocking_tugs}
